(load "huffman-tree.rkt")
(load "list-helpers.rkt")

(define (insert-in-ht-set ht ht-set)
  (if (null? ht-set)
      (list ht)
      (let ((first (car ht-set))
            (rest (cdr ht-set)))
        (if (< (ht-count ht) (ht-count first))
            (cons ht ht-set)
            (cons first (insert-in-ht-set ht rest))))))

(define (cons-ht-set l ul pred-eq?)
  (if (null? ul)
      '()
      (let ((first (car ul))
            (rest (cdr ul)))
        (insert-in-ht-set (cons-ht-leaf (count first l pred-eq?) first) (cons-ht-set l rest pred-eq?)))))

(define (combine-ht ht1 ht2)
  (cons-ht (+ (ht-count ht1) (ht-count ht2)) ht1 ht2))

(define (huffman-tree ht-set)
  (if (singleton? ht-set)
      (car ht-set)
      (let ((first (car ht-set))
            (second (cadr ht-set))
            (rest (cddr ht-set)))
        (huffman-tree (insert-in-ht-set (combine-ht first second) rest)))))

(define (compress huffman-tree symbol pred-eq?)
  (define (helper huffman-tree path)
    (if (ht-leaf? huffman-tree)
        (if (pred-eq? (ht-leaf-symbol huffman-tree) symbol) (reverse path) '())
        (append (helper (ht-left huffman-tree) (cons #\0 path))
                (helper (ht-right huffman-tree) (cons #\1 path)))))
  (helper huffman-tree '()))

(define (compressed-data l huffman-tree pred-eq?)
  (list->string (apply append (map (lambda (symbol) (compress huffman-tree symbol pred-eq?)) l))))

(define (encode l pred-eq?)
  (if (null? l)
      (cons '() "")
      (let* ((ht (huffman-tree (cons-ht-set l (unique l pred-eq?) pred-eq?)))
             (cd (compressed-data l ht pred-eq?)))
        (cons ht cd))))
